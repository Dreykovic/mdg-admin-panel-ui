import React, { useState } from 'react';
import {
  ProfileName,
  TokenStatus,
  VisibilityType,
  MovementType,
  ReferenceType,
  UOMType,
  RecipeDifficultyType,
  User,
  TokenFamily,
  RefreshToken,
  Origin,
  ProductCategory,
  ProductTag,
  ProductTagLink,
  Supplier,
  MarginLevel,
  UnitOfMeasure,
  Product,
  ProductImage,
  Inventory,
  Warehouse,
  StockMovement,
  RecipeCategory,
  RecipeCategoryLink,
  Recipe,
  Ingredient,
  Step,
  VolumeConversion,
} from './types';

// Composant principal de gestion d'inventaire
const InventoryManagement: React.FC = () => {
  const [activeTab, setActiveTab] = useState<string>('restock');
  const [selectedProduct, setSelectedProduct] = useState<Product | null>(null);

  // Exemple d'inventaire pour la démonstration
  const sampleInventory: Inventory = {
    id: 'inv123',
    quantity: 3,
    availableQuantity: 2,
    reservedQuantity: 1,
    reorderThreshold: 5,
    reorderQuantity: 10,
    inStock: true,
    backOrderable: true,
    lastStockCheck: new Date('2025-02-15'),
    nextScheduledCheck: new Date('2025-03-15'),
    warehouseId: 'wh1',
    warehouse: {
      id: 'wh1',
      name: 'Main Warehouse',
      location: 'Paris',
      isDefault: true,
    },
    createdAt: new Date(),
    updatedAt: new Date(),
  };

  return (
    <div className="container-fluid py-4">
      <h1 className="mb-4 text-primary fw-bold">Gestion d'Inventaire</h1>

      <div className="row mb-4">
        <div className="col-md-4">
          <ProductSelector onSelectProduct={setSelectedProduct} />
        </div>

        <div className="col-md-8">
          {selectedProduct ? (
            <div className="card shadow-sm border-0">
              <div className="card-header bg-primary text-white">
                <h5 className="mb-0">
                  Produit sélectionné: {selectedProduct.name}
                </h5>
              </div>
              <div className="card-body">
                <InventorySummary inventory={sampleInventory} />
              </div>
            </div>
          ) : (
            <div className="alert alert-info">
              Veuillez sélectionner un produit pour gérer son inventaire
            </div>
          )}
        </div>
      </div>

      <div className="card shadow-sm border-0">
        <div className="card-header bg-white">
          <ul className="nav nav-tabs card-header-tabs">
            <li className="nav-item">
              <button
                className={`nav-link ${activeTab === 'restock' ? 'active bg-primary text-white' : ''}`}
                onClick={() => setActiveTab('restock')}
              >
                <i className="icofont-refresh me-2"></i>Restock
              </button>
            </li>
            <li className="nav-item">
              <button
                className={`nav-link ${activeTab === 'reconcile' ? 'active bg-primary text-white' : ''}`}
                onClick={() => setActiveTab('reconcile')}
              >
                <i className="icofont-check-circled me-2"></i>Réconciliation
              </button>
            </li>
            <li className="nav-item">
              <button
                className={`nav-link ${activeTab === 'adjust' ? 'active bg-primary text-white' : ''}`}
                onClick={() => setActiveTab('adjust')}
              >
                <i className="icofont-ui-settings me-2"></i>Réajustement
              </button>
            </li>
            <li className="nav-item">
              <button
                className={`nav-link ${activeTab === 'history' ? 'active bg-primary text-white' : ''}`}
                onClick={() => setActiveTab('history')}
              >
                <i className="icofont-history me-2"></i>Historique
              </button>
            </li>
          </ul>
        </div>

        <div className="card-body">
          {activeTab === 'restock' && (
            <RestockForm inventory={sampleInventory} />
          )}
          {activeTab === 'reconcile' && (
            <ReconciliationForm inventory={sampleInventory} />
          )}
          {activeTab === 'adjust' && (
            <AdjustmentForm inventory={sampleInventory} />
          )}
          {activeTab === 'history' && (
            <MovementHistory inventoryId={sampleInventory.id} />
          )}
        </div>
      </div>
    </div>
  );
};

// Définition des props pour les composants
interface ProductSelectorProps {
  onSelectProduct: (product: Product) => void;
}

interface InventorySummaryProps {
  inventory: Inventory;
}

interface RestockFormProps {
  inventory: Inventory;
}

interface ReconciliationFormProps {
  inventory: Inventory;
}

interface AdjustmentFormProps {
  inventory: Inventory;
}

interface MovementHistoryProps {
  inventoryId: string;
}

// Utilitaire pour le formatage des dates
const formatDateTime = (date: Date | null): string => {
  if (!date) return 'N/A';
  return new Date(date).toLocaleDateString('fr-FR', {
    year: 'numeric',
    month: 'short',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit',
  });
};

// Sélecteur de produit
const ProductSelector: React.FC<ProductSelectorProps> = ({
  onSelectProduct,
}) => {
  // Exemple de liste de produits
  const products: Product[] = [
    {
      id: 'p1',
      name: 'Cannelle bio',
      sku: 'CAN-001',
      description: 'Cannelle biologique de Madagascar',
      isGlutenFree: true,
      isGMOFree: true,
      isActive: true,
      isArchived: false,
      visibility: 'VISIBLE' as VisibilityType,
      isFeatured: false,
      additionalCost: null,
      costPerGramWhole: 0.15,
      costPerGramGround: 0.18,
      pricePerGramWhole: 0.3,
      pricePerGramGround: 0.35,
      originId: 1,
      subcategoryId: null,
      categoryId: 1,
      supplierId: 1,
      marginLevelId: 1,
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    {
      id: 'p2',
      name: 'Poivre noir',
      sku: 'POI-002',
      description: 'Poivre noir de Kampot',
      isGlutenFree: true,
      isGMOFree: true,
      isActive: true,
      isArchived: false,
      visibility: 'VISIBLE' as VisibilityType,
      isFeatured: true,
      additionalCost: null,
      costPerGramWhole: 0.22,
      costPerGramGround: 0.25,
      pricePerGramWhole: 0.45,
      pricePerGramGround: 0.5,
      originId: 2,
      subcategoryId: null,
      categoryId: 1,
      supplierId: 1,
      marginLevelId: 1,
      createdAt: new Date(),
      updatedAt: new Date(),
    },
    {
      id: 'p3',
      name: 'Thé vert',
      sku: 'THE-003',
      description: 'Thé vert de Chine',
      isGlutenFree: true,
      isGMOFree: true,
      isActive: true,
      isArchived: false,
      visibility: 'VISIBLE' as VisibilityType,
      isFeatured: false,
      additionalCost: null,
      costPerGramWhole: 0.18,
      costPerGramGround: 0.2,
      pricePerGramWhole: 0.35,
      pricePerGramGround: 0.4,
      originId: 3,
      subcategoryId: null,
      categoryId: 2,
      supplierId: 2,
      marginLevelId: 1,
      createdAt: new Date(),
      updatedAt: new Date(),
    },
  ];

  return (
    <div className="card shadow-sm border-0 h-100">
      <div className="card-header bg-primary text-white py-3">
        <h6 className="mb-0 fw-bold">Sélection du Produit</h6>
      </div>
      <div className="card-body">
        <div className="mb-3">
          <input
            type="text"
            className="form-control"
            placeholder="Rechercher un produit..."
          />
        </div>
        <div className="list-group">
          {products.map((product) => (
            <button
              key={product.id}
              className="list-group-item list-group-item-action d-flex justify-content-between align-items-center"
              onClick={() => onSelectProduct(product)}
            >
              <div>
                <div className="fw-bold">{product.name}</div>
                <small className="text-muted">SKU: {product.sku}</small>
              </div>
              <span className="badge bg-primary rounded-pill">
                {product.categoryId === 1 ? 'Épices' : 'Thés'}
              </span>
            </button>
          ))}
        </div>
      </div>
    </div>
  );
};

// Résumé de l'inventaire
const InventorySummary: React.FC<InventorySummaryProps> = ({ inventory }) => {
  const getBadgeClass = (value: number): string => {
    if (value === 0) return 'badge bg-danger';
    if (value < inventory.reorderThreshold) return 'badge bg-warning text-dark';
    return 'badge bg-success';
  };

  return (
    <div className="row">
      <div className="col-md-6">
        <div className="d-flex justify-content-between mb-2">
          <span className="fw-bold">Quantité:</span>
          <span className={getBadgeClass(inventory.quantity)}>
            {inventory.quantity}
          </span>
        </div>
        <div className="d-flex justify-content-between mb-2">
          <span className="fw-bold">Disponible:</span>
          <span className={getBadgeClass(inventory.availableQuantity)}>
            {inventory.availableQuantity}
          </span>
        </div>
        <div className="d-flex justify-content-between mb-2">
          <span className="fw-bold">Réservé:</span>
          <span className="badge bg-secondary">
            {inventory.reservedQuantity}
          </span>
        </div>
      </div>
      <div className="col-md-6">
        <div className="d-flex justify-content-between mb-2">
          <span className="fw-bold">Seuil de réapprovisionnement:</span>
          <span className="badge bg-info">{inventory.reorderThreshold}</span>
        </div>
        <div className="d-flex justify-content-between mb-2">
          <span className="fw-bold">Dernier contrôle:</span>
          <span className="text-muted">
            {formatDateTime(inventory.lastStockCheck)}
          </span>
        </div>
        <div className="d-flex justify-content-between mb-2">
          <span className="fw-bold">Entrepôt:</span>
          <span>{inventory.warehouse?.name}</span>
        </div>
      </div>
    </div>
  );
};

// Formulaire de réapprovisionnement
const RestockForm: React.FC<RestockFormProps> = ({ inventory }) => {
  const [quantity, setQuantity] = useState<number>(inventory.reorderQuantity);
  const [notes, setNotes] = useState<string>('');
  const [supplierOrder, setSupplierOrder] = useState<string>('');

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    console.log('Restock order submitted:', {
      inventoryId: inventory.id,
      quantity,
      supplierOrder,
      notes,
    });
    // Logique de soumission ici
  };

  return (
    <form onSubmit={handleSubmit}>
      <div className="row">
        <div className="col-md-6">
          <div className="mb-3">
            <label htmlFor="quantity" className="form-label fw-bold">
              Quantité à réapprovisionner
            </label>
            <input
              type="number"
              className="form-control"
              id="quantity"
              min="1"
              value={quantity}
              onChange={(e) => setQuantity(parseInt(e.target.value))}
            />
            <small className="text-muted">
              Quantité recommandée: {inventory.reorderQuantity}
            </small>
          </div>

          <div className="mb-3">
            <label htmlFor="supplierOrder" className="form-label fw-bold">
              N° Commande Fournisseur
            </label>
            <input
              type="text"
              className="form-control"
              id="supplierOrder"
              value={supplierOrder}
              onChange={(e) => setSupplierOrder(e.target.value)}
            />
          </div>
        </div>

        <div className="col-md-6">
          <div className="mb-3">
            <label htmlFor="notes" className="form-label fw-bold">
              Notes
            </label>
            <textarea
              className="form-control"
              id="notes"
              rows={5}
              value={notes}
              onChange={(e) => setNotes(e.target.value)}
            ></textarea>
          </div>
        </div>
      </div>

      <div className="d-grid gap-2 d-md-flex justify-content-md-end">
        <button type="button" className="btn btn-outline-secondary">
          Annuler
        </button>
        <button type="submit" className="btn btn-success">
          <i className="icofont-check-circled me-1"></i>
          Confirmer le réapprovisionnement
        </button>
      </div>
    </form>
  );
};

// Formulaire de réconciliation
const ReconciliationForm: React.FC<ReconciliationFormProps> = ({
  inventory,
}) => {
  const [actualQuantity, setActualQuantity] = useState<number>(
    inventory.quantity,
  );
  const [notes, setNotes] = useState<string>('');
  const [reason, setReason] = useState<string>('');

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    console.log('Reconciliation submitted:', {
      inventoryId: inventory.id,
      systemQuantity: inventory.quantity,
      actualQuantity,
      difference: actualQuantity - inventory.quantity,
      reason,
      notes,
    });
    // Logique de soumission ici
  };

  return (
    <form onSubmit={handleSubmit}>
      <div className="alert alert-info">
        <i className="icofont-info-circle me-2"></i>
        La réconciliation permet d'ajuster l'inventaire après un comptage
        physique.
      </div>

      <div className="row">
        <div className="col-md-4">
          <div className="card bg-light mb-3">
            <div className="card-header bg-primary text-white">
              <h6 className="mb-0">Système</h6>
            </div>
            <div className="card-body text-center">
              <h3>{inventory.quantity}</h3>
              <p className="text-muted mb-0">unités</p>
            </div>
          </div>
        </div>

        <div className="col-md-4">
          <div className="card mb-3">
            <div className="card-header bg-primary text-white">
              <h6 className="mb-0">Comptage Physique</h6>
            </div>
            <div className="card-body">
              <input
                type="number"
                className="form-control form-control-lg text-center"
                min="0"
                value={actualQuantity}
                onChange={(e) => setActualQuantity(parseInt(e.target.value))}
              />
            </div>
          </div>
        </div>

        <div className="col-md-4">
          <div className="card mb-3">
            <div className="card-header bg-primary text-white">
              <h6 className="mb-0">Différence</h6>
            </div>
            <div className="card-body text-center">
              <h3
                className={
                  actualQuantity - inventory.quantity === 0
                    ? 'text-success'
                    : actualQuantity - inventory.quantity > 0
                      ? 'text-info'
                      : 'text-danger'
                }
              >
                {actualQuantity - inventory.quantity > 0 ? '+' : ''}
                {actualQuantity - inventory.quantity}
              </h3>
              <p className="text-muted mb-0">unités</p>
            </div>
          </div>
        </div>
      </div>

      <div className="row mt-3">
        <div className="col-md-6">
          <div className="mb-3">
            <label htmlFor="reason" className="form-label fw-bold">
              Raison de la différence
            </label>
            <select
              className="form-select"
              id="reason"
              value={reason}
              onChange={(e) => setReason(e.target.value)}
            >
              <option value="">Sélectionner une raison...</option>
              <option value="COUNTING_ERROR">
                Erreur de comptage précédent
              </option>
              <option value="THEFT">Vol</option>
              <option value="DAMAGE">Dommage/Casse</option>
              <option value="SYSTEM_ERROR">Erreur système</option>
              <option value="OTHER">Autre</option>
            </select>
          </div>
        </div>

        <div className="col-md-6">
          <div className="mb-3">
            <label htmlFor="notes" className="form-label fw-bold">
              Notes explicatives
            </label>
            <textarea
              className="form-control"
              id="notes"
              rows={3}
              value={notes}
              onChange={(e) => setNotes(e.target.value)}
            ></textarea>
          </div>
        </div>
      </div>

      <div className="d-grid gap-2 d-md-flex justify-content-md-end mt-3">
        <button type="button" className="btn btn-outline-secondary">
          Annuler
        </button>
        <button type="submit" className="btn btn-primary">
          <i className="icofont-check-circled me-1"></i>
          Valider la réconciliation
        </button>
      </div>
    </form>
  );
};

// Formulaire de réajustement
const AdjustmentForm: React.FC<AdjustmentFormProps> = ({ inventory }) => {
  const [adjustmentType, setAdjustmentType] =
    useState<MovementType>('STOCK_IN');
  const [quantity, setQuantity] = useState<number>(1);
  const [reason, setReason] = useState<string>('');
  const [notes, setNotes] = useState<string>('');

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    console.log('Adjustment submitted:', {
      inventoryId: inventory.id,
      adjustmentType,
      quantity,
      reason,
      notes,
    });
    // Logique de soumission ici
  };

  return (
    <form onSubmit={handleSubmit}>
      <div className="alert alert-warning">
        <i className="icofont-warning-alt me-2"></i>
        Le réajustement permet d'ajouter ou retirer manuellement des unités de
        l'inventaire.
      </div>

      <div className="row">
        <div className="col-md-6">
          <div className="mb-3">
            <label htmlFor="adjustmentType" className="form-label fw-bold">
              Type d'ajustement
            </label>
            <div className="btn-group w-100" role="group">
              <input
                type="radio"
                className="btn-check"
                name="adjustmentType"
                id="stockIn"
                value="STOCK_IN"
                checked={adjustmentType === 'STOCK_IN'}
                onChange={() => setAdjustmentType('STOCK_IN')}
              />
              <label className="btn btn-outline-success" htmlFor="stockIn">
                <i className="icofont-plus-circle me-1"></i>Entrée
              </label>

              <input
                type="radio"
                className="btn-check"
                name="adjustmentType"
                id="stockOut"
                value="STOCK_OUT"
                checked={adjustmentType === 'STOCK_OUT'}
                onChange={() => setAdjustmentType('STOCK_OUT')}
              />
              <label className="btn btn-outline-danger" htmlFor="stockOut">
                <i className="icofont-minus-circle me-1"></i>Sortie
              </label>
            </div>
          </div>

          <div className="mb-3">
            <label htmlFor="quantity" className="form-label fw-bold">
              Quantité
            </label>
            <input
              type="number"
              className="form-control"
              id="quantity"
              min="1"
              value={quantity}
              onChange={(e) => setQuantity(parseInt(e.target.value))}
            />
          </div>

          <div className="mb-3">
            <label htmlFor="reason" className="form-label fw-bold">
              Motif d'ajustement
            </label>
            <select
              className="form-select"
              id="reason"
              value={reason}
              onChange={(e) => setReason(e.target.value)}
            >
              <option value="">Sélectionner un motif...</option>
              <option value="ADJUSTMENT">Ajustement manuel</option>
              <option value="DAMAGE">Produit endommagé</option>
              <option value="RETURN">Retour client</option>
              <option value="TRANSFER">Transfert d'entrepôt</option>
              <option value="OTHER">Autre</option>
            </select>
          </div>
        </div>

        <div className="col-md-6">
          <div className="mb-3">
            <label htmlFor="notes" className="form-label fw-bold">
              Notes explicatives
            </label>
            <textarea
              className="form-control"
              id="notes"
              rows={8}
              value={notes}
              onChange={(e) => setNotes(e.target.value)}
              placeholder="Veuillez expliquer la raison de cet ajustement..."
            ></textarea>
          </div>
        </div>
      </div>

      <div className="d-grid gap-2 d-md-flex justify-content-md-end mt-3">
        <button type="button" className="btn btn-outline-secondary">
          Annuler
        </button>
        <button
          type="submit"
          className={`btn ${adjustmentType === 'STOCK_IN' ? 'btn-success' : 'btn-danger'}`}
        >
          <i
            className={`icofont-${adjustmentType === 'STOCK_IN' ? 'plus' : 'minus'}-circle me-1`}
          ></i>
          {adjustmentType === 'STOCK_IN'
            ? 'Ajouter au stock'
            : 'Retirer du stock'}
        </button>
      </div>
    </form>
  );
};

// Historique des mouvements
const MovementHistory: React.FC<MovementHistoryProps> = ({ inventoryId }) => {
  // Exemple de mouvements
  const movements: StockMovement[] = [
    {
      id: 'mov1',
      type: 'STOCK_IN',
      quantity: 10,
      referenceType: 'PURCHASE_ORDER',
      notes: 'Commande fournisseur #PO-2025-001',
      createdAt: new Date('2025-02-10'),
    },
    {
      id: 'mov2',
      type: 'STOCK_OUT',
      quantity: 2,
      referenceType: 'ORDER',
      notes: 'Commande client #ORD-2025-042',
      createdAt: new Date('2025-02-12'),
    },
    {
      id: 'mov3',
      type: 'STOCK_OUT',
      quantity: 1,
      referenceType: 'DAMAGE',
      notes: 'Produit endommagé lors de la manutention',
      createdAt: new Date('2025-02-17'),
    },
    {
      id: 'mov4',
      type: 'STOCK_IN',
      quantity: 1,
      referenceType: 'RETURN',
      notes: 'Retour client #RET-2025-007',
      createdAt: new Date('2025-02-20'),
    },
    {
      id: 'mov5',
      type: 'STOCK_OUT',
      quantity: 2,
      referenceType: 'ADJUSTMENT',
      notes: 'Réconciliation après inventaire physique',
      createdAt: new Date('2025-03-01'),
    },
  ];

  const getTypeIcon = (type: MovementType): string => {
    switch (type) {
      case 'STOCK_IN':
        return 'icofont-arrow-up text-success';
      case 'STOCK_OUT':
        return 'icofont-arrow-down text-danger';
      default:
        return 'icofont-question text-secondary';
    }
  };

  const getTypeBadge = (type: MovementType): string => {
    switch (type) {
      case 'STOCK_IN':
        return 'badge bg-success';
      case 'STOCK_OUT':
        return 'badge bg-danger';
      default:
        return 'badge bg-secondary';
    }
  };

  const getReferenceTypeBadge = (refType: ReferenceType): string => {
    switch (refType) {
      case 'ORDER':
        return 'badge bg-info';
      case 'PURCHASE_ORDER':
        return 'badge bg-primary';
      case 'ADJUSTMENT':
        return 'badge bg-warning text-dark';
      case 'DAMAGE':
        return 'badge bg-danger';
      case 'RETURN':
        return 'badge bg-secondary';
      default:
        return 'badge bg-light text-dark';
    }
  };

  const formatDate = (date: Date): string => {
    return new Date(date).toLocaleDateString('fr-FR', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
    });
  };

  return (
    <div>
      <div className="d-flex justify-content-between align-items-center mb-3">
        <h5 className="mb-0">Historique des mouvements</h5>
        <div>
          <button className="btn btn-sm btn-outline-primary me-2">
            <i className="icofont-filter me-1"></i>Filtrer
          </button>
          <button className="btn btn-sm btn-outline-secondary">
            <i className="icofont-download me-1"></i>Exporter
          </button>
        </div>
      </div>

      <div className="table-responsive">
        <table className="table table-hover table-striped">
          <thead className="table-light">
            <tr>
              <th>Date</th>
              <th>Type</th>
              <th>Quantité</th>
              <th>Référence</th>
              <th>Notes</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            {movements.map((movement) => (
              <tr key={movement.id}>
                <td>{formatDate(movement.createdAt)}</td>
                <td>
                  <span className={getTypeBadge(movement.type)}>
                    <i className={`${getTypeIcon(movement.type)} me-1`}></i>
                    {movement.type === 'STOCK_IN' ? 'Entrée' : 'Sortie'}
                  </span>
                </td>
                <td className="fw-bold">{movement.quantity}</td>
                <td>
                  <span
                    className={getReferenceTypeBadge(movement.referenceType)}
                  >
                    {movement.referenceType}
                  </span>
                </td>
                <td>{movement.notes}</td>
                <td>
                  <button className="btn btn-sm btn-outline-info me-1">
                    <i className="icofont-eye"></i>
                  </button>
                  <button className="btn btn-sm btn-outline-secondary">
                    <i className="icofont-print"></i>
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      <nav aria-label="Pagination">
        <ul className="pagination justify-content-center">
          <li className="page-item disabled">
            <a className="page-link" href="#" tabIndex={-1}>
              Précédent
            </a>
          </li>
          <li className="page-item active">
            <a className="page-link" href="#">
              1
            </a>
          </li>
          <li className="page-item">
            <a className="page-link" href="#">
              2
            </a>
          </li>
          <li className="page-item">
            <a className="page-link" href="#">
              3
            </a>
          </li>
          <li className="page-item">
            <a className="page-link" href="#">
              Suivant
            </a>
          </li>
        </ul>
      </nav>
    </div>
  );
};

export default InventoryManagement;
